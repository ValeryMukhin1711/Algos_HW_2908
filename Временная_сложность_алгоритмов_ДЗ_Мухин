 уровень сложности: Level 1
​​Какова временная сложность?
void test1(int n)
{
   if (n==1)
      return;
   for (int i=1; i<=n; i++)
       for (int j=1; j<=n; j++)
           System.out.println("*");
           break;
		 
}

Временная сложность:
O (n^2)
тк присутствуют вложенные циклы


void test2(int n)
{
   int a = 0;
   for (i = 0; i < n; i++)
      for (j = n; j > i; j--)
          a = a + i + j;

}

Временная сложность: 
 в циклах: перебор идет от i до n с увеличением, затем от n до i с уменьшением (тк j=n), то есть, при увеличении n циклы тоже будут удлиняться, как и в первом случае
сложность O (n^2)








Level 2
​​Какова временная сложность?
void test3(int n)
{
   int i, j, a = 0;
   for (i = n/2; i <=n; i++)
      for (j = 2; j <=n; j=j*2)
          a=a+n/2;   
}

временная сложность:
внешний цикл: количество итераций n/2 раз,
внутренний цикл: количество итераций log(n) раз, так как J удваивается каждую итерацию, поэтому она дойдет до ограничения не за линейное время, а за логарифмическое время от n,
поэтому временная сложность равна:
O(n/2 * log(n)), то есть)
O(n*log(n))


*void test4(int n)
{
   int a = 0, i = n;
   while (i > 0) {
      a += i;
      i /= 2;
   }
}


временная сложность:
i делится на два каждую итерацию цикла, значит, сложность логарифмическая:
O (log(n))